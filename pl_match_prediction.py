# -*- coding: utf-8 -*-
"""PL match prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13PguU7ZlE6mZQmH1LetSlZqwjm1APNYb

Predicting premier league matches result using a Machine Learning Model
"""

import pandas as pd

matches = pd.read_csv("matches.csv", index_col=0)

matches.head

matches.info

matches.shape

matches["team"].value_counts()

rounds=pd.DataFrame(matches["round"].value_counts())
rounds

#rounds=rounds.sort_values(by=rounds.columns[0] , ascending=True)
#rounds

"""Deleting columns that will give us no insights"""

del matches["comp"]
del matches["notes"]

#converting the date into data format
matches["date"] = pd.to_datetime(matches["date"])

def map_result_to_target(result):
    if result == 'W':
        return 1
    #elif result == 'D':
    #    return 1
    else:
        return 0

matches["target"]=matches["result"].apply(map_result_to_target)

matches

matches["venue_code"] = matches["venue"].astype("category").cat.codes

matches["opp_code"] = matches["opponent"].astype("category").cat.codes

matches["hour"] = matches["time"].str.replace(":.+", "", regex=True).astype("int")

matches["day_code"] = matches["date"].dt.dayofweek

matches

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=100, min_samples_split=10, random_state=1)

#from sklearn.model_selection import train_test_split

#train, test = train_test_split(matches, test_size=0.2, random_state=42)

train=matches.iloc[:1000]
test=matches.iloc[1000:]

predictors = ["venue_code", "opp_code", "hour", "day_code"]

rf.fit(train[predictors], train["target"])

preds = rf.predict(test[predictors])

preds

from sklearn.metrics import accuracy_score

accuracy_score(test["target"], preds)

combined = pd.DataFrame(dict(actual=test["target"], predicted=preds))

pd.crosstab(index=combined["actual"], columns=combined["predicted"])

from sklearn.metrics import precision_score

precision_score(test["target"], preds, average=None)

grouped_matches = matches.groupby("team")

group = grouped_matches.get_group("Manchester City").sort_values("date")

group

def rolling_averages(group, cols, new_cols):
    group = group.sort_values("date")
    rolling_stats = group[cols].rolling(3, closed='left').mean()
    group[new_cols] = rolling_stats
    group = group.dropna(subset=new_cols)
    return group

cols = ["gf", "ga", "sh", "sot", "dist", "fk", "pk", "pkatt"]
new_cols = [f"{c}_rolling" for c in cols]

rolling_averages(group, cols, new_cols)

matches_rolling = matches.groupby("team").apply(lambda x: rolling_averages(x, cols, new_cols))

matches_rolling

matches_rolling = matches_rolling.droplevel('team')

matches_rolling

matches_rolling.index = range(matches_rolling.shape[0])
matches_rolling

train=matches_rolling.iloc[:1000]
test=matches_rolling.iloc[1000:]

predictors=predictors + new_cols
predictors

rf.fit(train[predictors], train["target"])
preds = rf.predict(test[predictors])

precision_score(test["target"], preds)

combined = pd.DataFrame(dict(actual=test["target"], predicted=preds), index=test.index)
combined

precision_score(test["target"], preds, average=None)

combined = combined.merge(matches_rolling[["date", "team", "opponent", "result"]], left_index=True, right_index=True)

combined

class MissingDict(dict):
    __missing__ = lambda self, key: key

map_values = {"Brighton and Hove Albion": "Brighton", "Manchester United": "Manchester Utd", "Newcastle United": "Newcastle Utd", "Tottenham Hotspur": "Tottenham", "West Ham United": "West Ham", "Wolverhampton Wanderers": "Wolves"}
mapping = MissingDict(**map_values)

combined["new_team"] = combined["team"].map(mapping)
combined

merged = combined.merge(combined, left_on=["date", "new_team"], right_on=["date", "opponent"])

merged

total_pen_attempted=matches["pkatt"].sum()
total_pen_attempted

total_pen_scored=matches["pk"].sum()
total_pen_scored

import matplotlib.pyplot as plt

plt.figure(figsize=(13,6))
pen_not_scored=total_pen_attempted-total_pen_scored
data=[pen_not_scored,total_pen_scored]
labels=['Penalties missed','Penalties Scored']
plt.pie(data, labels= labels)
plt.show()

average_attendance = matches.groupby('team')['attendance'].mean().reset_index()

plt.figure(figsize=(10, 6))  # Adjust figure size if needed
plt.bar(average_attendance['team'], average_attendance['attendance'], color='skyblue')
plt.xlabel('Team')
plt.ylabel('Average Attendance')
plt.title('Average Attendance for Premier League Teams')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

matches['Goal Difference'] = matches['gf'] - matches['xg']
average_outperformance = matches.groupby('team')['Goal Difference'].mean().reset_index()
average_outperformance = average_outperformance.sort_values(by='Goal Difference', ascending=False)
plt.figure(figsize=(10, 6))  # Adjust figure size if needed
plt.bar(average_outperformance['team'], average_outperformance['Goal Difference'], color='skyblue')
plt.xlabel('Team')
plt.ylabel('Outperformance')
plt.title('Average Outperformance of Expected Goals by Premier League Teams')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

average_possession = matches.groupby('team')['poss'].mean().reset_index()
average_possession = average_possession.sort_values(by='poss', ascending=False)
plt.figure(figsize=(10, 6))  # Adjust figure size if needed
plt.bar(average_possession['team'], average_possession['poss'], color='skyblue')
plt.xlabel('Team')
plt.ylabel('Average Possession')
plt.title('Average Possession of Premier League Teams')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

win_rate = matches.groupby(['team', 'venue'])['result'].apply(lambda x: (x == 'W').sum() / len(x)).unstack()
better_away_teams = win_rate[win_rate['Away'] > win_rate['Home']]
print("Teams performing better on away games:")
print(better_away_teams)

average_goals_scored = matches.groupby('team')['gf'].mean()
average_goals_conceded = matches.groupby('team')['ga'].mean()
sorted_by_goals_scored = average_goals_scored.sort_values(ascending=False)
sorted_by_goals_conceded = average_goals_conceded.sort_values(ascending=False)
fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(10, 8))

sorted_by_goals_scored.plot(kind='bar', ax=axes[0], color='skyblue')
axes[0].set_title('Teams with Most Goals Scored on Average')
axes[0].set_ylabel('Average Goals Scored')

sorted_by_goals_conceded.plot(kind='bar', ax=axes[1], color='salmon')
axes[1].set_title('Teams with Most Goals Conceded on Average')
axes[1].set_ylabel('Average Goals Conceded')

plt.tight_layout()
plt.show()

formation_counts = matches['formation'].value_counts()
most_common_formations = formation_counts.head()
#removing the below 3 percent used formations because they will make the diagram clustered
filtered_formations = formation_counts[formation_counts / formation_counts.sum() * 100 >= 3]
plt.figure(figsize=(8, 8))
plt.pie(filtered_formations, labels=filtered_formations.index, autopct='%1.1f%%', startangle=140)
plt.title('Formations Played')
plt.axis('equal')
plt.show()

import seaborn as sns
import matplotlib.patches as patches

mcfc_shots = matches[matches['team'] == 'Manchester City']
plt.figure(figsize=(10, 6))
heatmap_data = pd.pivot_table(mcfc_shots, values='dist', index=pd.cut(mcfc_shots['dist'], bins=range(8, 30, 1)), aggfunc='count')
sns.heatmap(heatmap_data, cmap='viridis', annot=True, fmt='g', cbar_kws={'label': 'Number of Shots'})
plt.title('Manchester City Shots Heatmap')
plt.ylabel('Distance from Goal (yards)')
plt.xlabel('Number of Shots')
plt.show()